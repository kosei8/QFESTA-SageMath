import cProfile
import pstats
import time
import sys
sys.path.append('/Users/konami/utokyo/00_lab/software/QFESTA-SageMath')

# Sage Imports
from sage.all import EllipticCurve, GF, ceil, Matrix, ZZ, Zmod, inverse_mod, PolynomialRing

import richelot_isogenies as ri
import utilities.strategy as us
import utilities_festa as uf
import parameter_generate as pm
import elliptic_curve as ec
import divisor_arithmetic as da

# ========================= #
#       　   SetUp    　　   #
# ========================= #

# Sage goes vroom!
uf.speed_up_sagemath()

# Default is FESTA_128
SECURITY = "128"

for arg in sys.argv[1:]:
    if arg.lower() in ["--toy", "-t"]:
        SECURITY = "TOY"
    elif arg.lower() in ["--192", "-II"]:
        SECURITY = "192"
    elif arg.lower() in ["--256", "-V"]:
        SECURITY = "256"

# PKE = FESTA
NAME = "QFESTA_" + SECURITY

uf.print_info(f"affine_dbl_iter Benchmarking {NAME}")

# set variables
a, b1, b2, f, D1, D2 = pm.SysParam2(int(SECURITY))
p = ZZ(2**a*3*f - 1)
Fp4, Fp2, zeta2 = pm.calcFields(p)

# supersingular elliptic curve E0
Fp2d = GF(p**2, modulus=[1, 0, 1], name="i")
i = Fp2d.gen()
E0 = EllipticCurve(Fp2, [1, 0])
basis2 = ec.basis(E0, 2, a)

# polynomial ring (FromProdToJacで定義されているやつ)
R = PolynomialRing(Fp2d, name="x", implementation="generic")
x = R.gens()[0]
# print(R)
h1, h3, h5 = 0, 0, 0
h0 = 331097855532447697541342307488045815138036440508183133213378496112289420149639990579806419396306486268727010878064653912*i + 140687295187471608261251439694691449581467911545259174431463943959908804617300774770269208381297093393334489626336290844
h2 = 234323807688032733075911540497420562791608660780024524827179874493000568641197702157559957182732337184421912737973688530*i + 86792300056800013181711652320027725549433831141989187034137725760860959359837842642493722628247022180316426256281384657
h4 = 388383452938669061149330672249408011900460325114916241110823683537242333806561789270771636299068370845459022400514190660*i + 297382011647898783423909184312560746341578391037545089162804587715411796691721212962304652822831855307104944090771310145
h6 = 180656699629745285321781431310827035740597172647725440029110025831007248391675250892679055123633374257205747974665813657*i + 100800524209352790314138249857650760902473005292396598966198354254886806508429215511104928984755170690097838778124938083
h_coeffs = [h0,h1,h2,h3,h4,h5,h6]
# print(h_coeffs)
h = R(h_coeffs)

# For magic square root in splitting
# 128
b = 390
# 192
# b = 582
# 256
# b = 774


# strategy
strategy = us.optimised_strategy(b - 1)
# 256
# strategy = [589, 141, 34, 7, 1, 6, 5, 4, 3, 2, 1, 27, 6, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 107, 27, 6, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 81, 20, 5, 4, 3, 2, 1, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 61, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 46, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 35, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 27, 6, 1, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 449, 107, 26, 6, 5, 4, 3, 2, 1, 20, 5, 4, 3, 2, 1, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 81, 20, 5, 4, 3, 2, 1, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 61, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 46, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 35, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 27, 6, 1, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 342, 81, 20, 5, 4, 3, 2, 1, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 61, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 46, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 35, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 27, 6, 1, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 261, 61, 15, 4, 3, 2, 1, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 46, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 35, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 27, 6, 1, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 200, 46, 11, 3, 2, 1, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 35, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 27, 6, 1, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 154, 35, 8, 2, 1, 6, 1, 5, 4, 3, 2, 1, 27, 6, 1, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 119, 27, 6, 1, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 92, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 71, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 55, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 43, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1, 34, 7, 1, 6, 5, 4, 3, 2, 1, 27, 6, 5, 4, 3, 2, 1, 21, 5, 4, 3, 2, 1, 16, 4, 3, 2, 1, 12, 3, 2, 1, 9, 2, 1, 7, 1, 6, 5, 4, 3, 2, 1]

# point
# 128
u = x**2 + (391756731104124622581839978354731795020319842836594391286494672053437820123136989233129758717144710423770811868014109237*i + 150302524248598504325731118079763077281369478382691616329938911521393077571092376814191023402786329963964721611920225140)*x + 160220726539203492058377454873751986525698598566513711793682183199077018690282389867498541106657183936091759495362165650*i + 175073396459459780388086354253382645600227870802893016211902499063869328136784187138078074115959392785587615141910537033
v = (239554325468958962074728756285718233736381440122130680067790296531376453053194944774886397814534803150076104162127660028*i + 222516791992989204358291539592475800647930802433732102663395412083664519810111589651860117982096139666861139430475404285)*x + 211973009211698640996672408036773510408258329420410670526934786307214928447144647171245688102390779956313964742295486049*i + 38274656560938998642248168857230146732347619855852112978636857782251962842947148110713835164146492988739364099491393673
# 192
# 256


# ========================= #
#      Start Profiling      #
# ========================= #
# Start the profiler
setup_time = time.time()
pr = cProfile.Profile()
pr.enable()

# ===================== #
#         Main          #
# ===================== #
D1 = da.affine_dbl_iter(h, u, v, strategy[0])
# D2 = da.affine_dbl_iter([glueP2, glueQ2])


# ========================= #
#       End Profiling       #
# ========================= #

pr.disable()
pr.dump_stats("festa_keygen.cProfile")
uf.print_info(f"affine_dbl_iter took: {(time.time() -  setup_time):.3f} seconds")
p = pstats.Stats("festa_keygen.cProfile")
p.strip_dirs().sort_stats("cumtime").print_stats(50)